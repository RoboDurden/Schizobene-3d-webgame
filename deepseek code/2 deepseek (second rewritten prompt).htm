<!DOCTYPE html>
<html>
<head>
    <title>3D Tunnel Game</title>
    <style>
        body { margin: 0; }
        canvas { display: block; }
        #hud {
            position: fixed;
            top: 10px;
            left: 10px;
            color: white;
            font-family: Arial;
            font-size: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }
        #gameOver {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0,0,0,0.8);
            padding: 20px;
            color: white;
            text-align: center;
            border-radius: 10px;
        }
    </style>
</head>
<body>
    <div id="hud"></div>
    <div id="gameOver">
        <h2>Game Over!</h2>
        <p>Score: <span id="finalScore">0</span></p>
        <input type="text" id="playerName" placeholder="Enter your name">
        <button onclick="saveScore()">Save Score</button>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        let scene, camera, renderer;
        let playerX = 0, playerY = 0, playerZ = 0;
        let currentSpeed = 0.1;
        let level = 0;
        let score = 0;
        let lives = 3;
        let walls = [];
        let objectTypes = [];
        let targetObjectType = null;
        let keys = {};
        let gameActive = true;
        let topScores = JSON.parse(localStorage.getItem('topScores')) || [];

        init();
        animate();

        function init() {
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);

            // Lighting
            const light = new THREE.PointLight(0xffffff, 1, 100);
            light.position.set(0, 0, 0);
            scene.add(light);
            scene.add(new THREE.AmbientLight(0x404040));

            generateLevel();
        }

        function generateLevel() {
            walls.forEach(wall => scene.remove(wall.mesh));
            walls = [];
            playerZ = 0;

            objectTypes = createShuffledObjectTypes();
            targetObjectType = objectTypes[8];

            // Create 8 regular walls
            for(let i = 0; i < 8; i++) {
                const zPos = 1 + i * 2;
                createWall(zPos, objectTypes[i]);
            }

            // Create final wall
            createFinalWall(17);

            currentSpeed = 0.1 + level * 0.05;
        }

        function createShuffledObjectTypes() {
            const types = [];
            const shapes = ['cube', 'pyramid', 'ball'];
            const colors = [0xff0000, 0x00ff00, 0x0000ff];
            
            shapes.forEach(shape => {
                colors.forEach(color => {
                    types.push({ shape, color });
                });
            });

            for(let i = types.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [types[i], types[j]] = [types[j], types[i]];
            }
            return types;
        }

        function createWall(zPos, type) {
            const gapX = Math.floor(Math.random() * 3) - 1;
            const gapY = Math.floor(Math.random() * 3) - 1;

            for(let x = -1; x <= 1; x++) {
                for(let y = -1; y <= 1; y++) {
                    if(x === gapX && y === gapY) continue;
                    
                    const mesh = createObjectMesh(type);
                    mesh.position.set(x, y, zPos);
                    scene.add(mesh);
                    walls.push({ 
                        z: zPos, 
                        gapX, 
                        gapY, 
                        mesh, 
                        type, 
                        isFinal: false 
                    });
                }
            }
        }

        function createFinalWall(zPos) {
            const positions = [];
            for(let x = -1; x <= 1; x++) {
                for(let y = -1; y <= 1; y++) {
                    positions.push({ x, y });
                }
            }
            
            // Shuffle positions
            for(let i = positions.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [positions[i], positions[j]] = [positions[j], positions[i]];
            }

            positions.forEach((pos, i) => {
                const type = objectTypes[i];
                const mesh = createObjectMesh(type);
                mesh.position.set(pos.x, pos.y, zPos);
                scene.add(mesh);
                walls.push({
                    z: zPos,
                    x: pos.x,
                    y: pos.y,
                    mesh,
                    type,
                    isFinal: true,
                    isTarget: type === targetObjectType
                });
            });
        }

        function createObjectMesh(type) {
            let geometry;
            switch(type.shape) {
                case 'cube': 
                    geometry = new THREE.BoxGeometry(0.9, 0.9, 0.9);
                    break;
                case 'pyramid':
                    geometry = new THREE.ConeGeometry(0.45, 0.9, 4);
                    break;
                case 'ball':
                    geometry = new THREE.SphereGeometry(0.45, 32, 32);
                    break;
            }
            const material = new THREE.MeshPhongMaterial({ 
                color: type.color,
                shininess: 100 
            });
            return new THREE.Mesh(geometry, material);
        }

        function handleInput() {
            if(!gameActive) return;

            const moveSpeed = 0.2;
            if(keys.ArrowLeft && playerX > -1) playerX -= moveSpeed;
            if(keys.ArrowRight && playerX < 1) playerX += moveSpeed;
            if(keys.ArrowUp && playerY < 1) playerY += moveSpeed;
            if(keys.ArrowDown && playerY > -1) playerY -= moveSpeed;

            playerX = Math.round(playerX * 10) / 10;
            playerY = Math.round(playerY * 10) / 10;
        }

        function checkCollisions() {
            walls.forEach(wall => {
                if(wall.passed || playerZ < wall.z) return;
                
                wall.passed = true;
                if(wall.isFinal) {
                    if(wall.isTarget && Math.abs(playerX - wall.x) < 0.1 && 
                       Math.abs(playerY - wall.y) < 0.1) {
                        score += 2;
                        scene.remove(wall.mesh);
                        setTimeout(() => {
                            level++;
                            generateLevel();
                        }, 1000);
                    } else {
                        handleCollision();
                    }
                } else {
                    if(Math.abs(playerX - wall.gapX) < 0.1 && 
                       Math.abs(playerY - wall.gapY) < 0.1) {
                        score++;
                    } else {
                        handleCollision();
                    }
                }
            });
        }

        function handleCollision() {
            lives--;
            if(lives <= 0) {
                gameActive = false;
                document.getElementById('gameOver').style.display = 'block';
                document.getElementById('finalScore').textContent = score;
            } else {
                generateLevel();
            }
        }

        function updateCamera() {
            camera.position.set(playerX, playerY, playerZ);
            camera.lookAt(playerX, playerY, playerZ + 5);
        }

        function updateObjects() {
            walls.forEach(wall => {
                const distance = wall.z - playerZ;
                const scale = Math.min(0.9, 0.9 * (1 + 3 / Math.max(1, distance)));
                wall.mesh.scale.set(scale, scale, scale);
            });
        }

        function animate() {
            requestAnimationFrame(animate);
            
            if(gameActive) {
                handleInput();
                playerZ += currentSpeed;
                updateCamera();
                updateObjects();
                checkCollisions();
            }

            renderer.render(scene, camera);
            document.getElementById('hud').textContent = 
                `Score: ${score} | Lives: ${lives} | Level: ${level}`;
        }

        function saveScore() {
            const name = document.getElementById('playerName').value || 'Anonymous';
            topScores.push({ name, score });
            topScores.sort((a, b) => b.score - a.score);
            topScores = topScores.slice(0, 10);
            localStorage.setItem('topScores', JSON.stringify(topScores));
            
            gameActive = true;
            document.getElementById('gameOver').style.display = 'none';
            level = Math.max(0, level - 5);
            score = 0;
            lives = 3;
            generateLevel();
        }

        // Event listeners
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });

        document.addEventListener('keydown', (e) => keys[e.key] = true);
        document.addEventListener('keyup', (e) => keys[e.key] = false);
    </script>
</body>
</html>